// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ************************
// *   Game Data Models   *
// ************************
enum LearnLevel {
  a1
  a2
  b1
  b2
  c1
  c2
}

model Word {
  word   String  @id @unique
  length Int
  
  learnLevel LearnLevel

  hints  WordHint[]

  dailyChallengeWordGameProgress DailyChallengeWordGameProgress[]

  classicFourLettersGameProgress ClassicFourLettersGameProgress[]
  classicFiveLettersGameProgress ClassicFiveLettersGameProgress[]
  withHintGameProgress WithHintGameProgress[]
}

model WordHint {
  id Int @id @default(autoincrement())
  hash String @unique
  
  word Word @relation(fields: [wordId], references: [word])
  wordId String
  
  hint String
  length Int

  source String?

  classicFourLettersGameProgress ClassicFourLettersGameProgress[]
  classicFiveLettersGameProgress ClassicFiveLettersGameProgress[]
  dailyChallengeWordGameProgress DailyChallengeWordGameProgress[]
  withHintGameProgress WithHintGameProgress[]
}

// ************************
// *   User Data Models   *
// ************************
model User {
  id  String  @id @default(cuid())
  token String @unique @default(cuid())

  name String

  diamonds Int @default(0)
  coins   Int @default(0)

  purchasedShopItems ShopItem[]

  classicFourLettersGameProgress ClassicFourLettersGameProgress @relation(fields: [classicFourLettersGameProgressId], references: [id], onDelete: Cascade)
  classicFourLettersGameProgressId Int @unique
  classicFiveLettersGameProgress ClassicFiveLettersGameProgress @relation(fields: [classicFiveLettersGameProgressId], references: [id], onDelete: Cascade)
  classicFiveLettersGameProgressId Int @unique
  
  dailyChallengeWordGameProgress DailyChallengeWordGameProgress[]
  
  withHintGameProgress WithHintGameProgress @relation(fields: [withHintGameProgressId], references: [id], onDelete: Cascade)
  withHintGameProgressId Int @unique
}

// ************************
// * Game Progress Models *
// ************************
model ClassicFourLettersGameProgress {
  id Int @id @default(autoincrement())
  user User?
  
  streak Int @default(0)
  
  word Word @relation(fields: [wordId], references: [word])
  wordId String

  hint WordHint? @relation(fields: [hintId], references: [id])
  hintId Int?
  
  guesses String[]
  maxGuesses Int
}

model ClassicFiveLettersGameProgress {
  id Int @id @default(autoincrement())
  user User?
  
  streak Int @default(0)
  
  word Word @relation(fields: [wordId], references: [word])
  wordId String

  hint WordHint? @relation(fields: [hintId], references: [id])
  hintId Int?
  
  guesses String[]
  maxGuesses Int
}

model DailyChallengeWordGameProgress {
  id Int @id @default(autoincrement())
  user User? @relation(fields: [userId], references: [id])
  userId String

  date DateTime
  
  isCompleted Boolean @default(false)
  isWon Boolean @default(false)

  word Word @relation(fields: [wordId], references: [word])
  wordId String

  hint WordHint? @relation(fields: [hintId], references: [id])
  hintId Int?

  guesses String[]
  maxGuesses Int

  @@unique([userId, date])
}

model WithHintGameProgress {
  id Int @id @default(autoincrement())
  user User?
  
  streak Int @default(0)
  
  word Word @relation(fields: [wordId], references: [word])
  wordId String

  hint WordHint @relation(fields: [hintId], references: [id])
  hintId Int
  
  guesses String[]
  maxGuesses Int
}


// ************************
// *   Shop Data Models  *
// ************************

enum ShopItemCategory {
  background
  theme
  font

  sticker
}

model ShopItem {
  id String @id @default(cuid())
  category ShopItemCategory

  name String
  subCategory String
  price Int
  data Json

  inShop Boolean @default(true)

  usersPurchased User[]
}
